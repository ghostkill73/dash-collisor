#!/usr/bin/env dash
# ----------------------------------------------------------------------+
# autor   : Abner Benedito
# github  : ghostkill73
# creation: 2024-06-07
# version : 0.0.2 (2024-06-29)
# license : GPLv3+
# ----------------------------------------------------------------------+
# LICENSE
#
# Copyright (C) 2024  Abner Benedito
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# ----------------------------------------------------------------------+
# CONFIGURATIONS


# ----------------------------------------------------------------------+
# VARIABLES

_dc_version="v0.0.2"
_dc_savefile="save-hash-collision.txt"

_dc_true="0"
_dc_false="1"

_dc_savecommand="./dash-collisor ${*}"

# ----------------------------------------------------------------------+
# FUNCTIONS

msg() { printf '%s\n' "$*" 2>/dev/null; }

tmsg()
{
	sleep 0.05
	printf '%s\n' "$*" 2>/dev/null
}

show_title()
{
	tmsg ''
	tmsg '                      :::!~!!!!!:.'
	tmsg '                  .xUHWH!! !!?M88WHX:.'
	tmsg '                .X*#M@$!!  !X!M$$$$$$WWx:.'
	tmsg '               :!!!!!!?H! :!$!$$$$$$$$$$8X:'
	tmsg '              !!~  ~:~!! :~!$!#$$$$$$$$$$8X:'
	tmsg '             :!~::!H!<   ~.U$X!?R$$$$$$$$MM!'
	tmsg '             ~!~!!!!~~ .:XW$$$U!!?$$$$$$RMM!'
	tmsg '               !:~~~ .:!M"T#$$$$WX??#MRRMMM! .sSSSSs.    .sSSSSs.    .sSSSSSSSs  .sSSS SSSSS'
	tmsg '               ~?WuxiW*`   `"#$$$$8!!!!??!!! S SSSSSSSs. S SSSSSSSs. S SSS SSSS  S SSS SSSSS'
	tmsg '             :X- M$$$$       `"T#$T~!8$WUXU~ S  SS SSSSS S  SS SSSSS S  SS       S  SS SSSSS'
	tmsg '            :%`  ~#$$$m:        ~!~ ?$$$$$$  S..SS SSSSS S..SSsSSSSS `SSSSsSSSa. S..SSsSSSSS'
	tmsg '          :!`.-   ~T$$$$8xx.  .xWW- ~""##*"  S:::S SSSSS S:::S SSSSS .sSSS SSSSS S:::S SSSSS'
	tmsg '.....   -~~:<` !    ~?T#$$@@W@*?$$      /`   S;;;S SSSSS S;;;S SSSSS S;;;S SSSSS S;;;S SSSSS'
	tmsg 'W$@@M!!! .!~~ !!     .:XUW$W!~ `"~:    :     S%%%S SSSS  S%%%S SSSSS S%%%S SSSSS S%%%S SSSSS'
	tmsg '#"~~`.:x%`!!  !H:   !WM$$$$Ti.: .!WUn+!`     SSSSSsS;:   SSSSS SSSSS SSSSSsSSSSS SSSSS SSSSS'
	tmsg ':::~:!!`:X~ .: ?H.!u "$$$B$$$!W:U!T$$M~                         collisor'
	tmsg '.~~   :X@!.-~   ?@WTWo("*$$$W$TH$! `'
	tmsg 'Wi.~!X$?!-~    : ?$$$B$Wu("**$RM!'
	tmsg '$R@i.~~ !     :   ~$$$$$B$$en:``'
	tmsg '?MXT@Wx.~    :     ~"##*$$$$M~"'
	tmsg ''
}

showHelp()
{
	msg "dash-collisor ${_dc_version} Copyright (C) 2024  Abner Benedito"
	msg " This program comes with ABSOLUTELY NO WARRANTY"
	msg " This is free software, and you are welcome to redistribute it"
	msg " under certain conditions."
	msg ""
	msg "Usage: dash-collisor [OPTION] [HASH-TYPE...] <HASH...> <range(default=20)>"
	msg "dash-collisor is a random bruteforce that searches for collisions of a hash."
	msg ""
	msg "      --help                 display this help and exit"
	msg "  -V, --version              output version information and exit"
	msg "  -L, --license              display the license program"
	msg "      --[HASH-TYPE]          find hash collisions at the input"
	msg "			       avaliable hashes:"
	msg "			       md5, sha1, sha224, sha256, sha384,"
	msg "			       sha512 and b2"
	msg "  -nv, --no-verbose          don't display hashes calcs"
	msg "  -s,  --save                save the collision result"
	msg "  -nvs,-snv                  --save && --no-verbose"
	msg ""
	msg "  example: ./dash-collisor --save --md5 63a9f0ea7bb98050796b649e85481845 30"
	msg ""
	msg "contribute and report bugs in: <github.com/ghostkill73/dash-collisor>"

	exit ${_dc_true}
}

showError()
{
	local option="$1"

	msg " the option "\'$option\'" was not found."
	msg " type '--help' option for more information."

	exit ${_dc_false}
}

showVersion()
{
	msg " dash-collisor ${_dc_version} <github.com/ghostkill73/dash-collisor>"

	exit ${_dc_true}
}

shortLicense()
{
	msg " dash-collisor  Copyright (C) 2024  Abner Benedito"
	msg " This program comes with ABSOLUTELY NO WARRANTY"
	msg " This is free software, and you are welcome to redistribute it"
	msg " under certain conditions. use '--license' for more information."
	msg ""
	msg " use '--help' option for more information."

	exit ${_dc_true}
}

license()
{
	msg " dash-collisor Copyright (C) 2024  Abner Benedito"
	msg ""
	msg " This program is free software: you can redistribute it and/or modify"
	msg " it under the terms of the GNU General Public License as published by"
	msg " the Free Software Foundation, either version 3 of the License, or"
	msg " (at your option) any later version."
	msg ""
	msg " This program is distributed in the hope that it will be useful,"
	msg " but WITHOUT ANY WARRANTY; without even the implied warranty of"
	msg " MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the"
	msg " GNU General Public License for more details."
	msg ""
	msg " You should have received a copy of the GNU General Public License"
	msg " along with this program.  If not, see <https://www.gnu.org/licenses/>."

	exit ${_dc_true}
}


hash()
{
	local _dc_hash
	local _dc_hashtype="$1"
	local _dc_hashvalue="$2"

	case ${_dc_hashtype} in
	# md5, sha1, sha224, sha256, sha384, sha512 & b2

	--md5) _dc_hash="$(printf '%s' "$_dc_hashvalue" | md5sum)"; printf '%s\n' "${_dc_hash%% *}" ;;

	--sha1) _dc_hash="$(printf '%s' "$_dc_hashvalue" | sha1sum)"; printf '%s\n' "${_dc_hash%% *}" ;;

	--sha224) _dc_hash="$(printf '%s' "$_dc_hashvalue" | sha224sum)"; printf '%s\n' "${_dc_hash%% *}" ;;

	--sha256) _dc_hash="$(printf '%s' "$_dc_hashvalue" | sha256sum)"; printf '%s\n' "${_dc_hash%% *}" ;;

	--sha384) _dc_hash="$(printf '%s' "$_dc_hashvalue" | sha384sum)"; printf '%s\n' "${_dc_hash%% *}" ;;

	--sha512) _dc_hash="$(printf '%s' "$_dc_hashvalue" | sha512sum)"; printf '%s\n' "${_dc_hash%% *}" ;;

	--b2) _dc_hash="$(printf '%s' "$_dc_hashvalue" | b2sum)"; printf '%s\n' "${_dc_hash%% *}" ;;

	*) exit ${_dc_false} ;;

	esac

	return ${_dc_true}
}


check_options()
{
	local check="$*"

	# if no-verbose -> off
	if echo "$check" | grep -Pq '\-\-no-verbose|\-nv|\-nvs|\-snv'; then
		_dc_setverbose="${_dc_false}"
	else
		_dc_setverbose="${_dc_true}"
	fi

	# if save -> on
	if echo "$check" | grep -Pq '\-\-save|\-s|\-nvs|\-snv'; then
		_dc_setsave="${_dc_true}"
	else
		_dc_setsave="${_dc_false}"
	fi
}

check_arguments()
{
	local check="$*"

	if echo "$check" | grep -Pq '\-\-no-verbose|\-nv|\-\-save|\-s|\-nvs|-snv'; then
		msg "dash-collisor [OPTIONS] [HASH-TYPE] <HASH> <limit(default=20)>"
		msg " use a single option in the first argument."
		msg " type '--help' option for more information."
		exit ${_dc_false}
	fi
}


main()
{
	local _dc_mainrandom
	local _dc_maintype="$1"
	local _dc_mainhash="$2"
	local _dc_setlimit="$3"

	: ${_dc_setverbose:=0} # default verbose: on
	: ${_dc_setsave:=1}    # default save:    off
	: ${_dc_setlimit:=20}  # default limit:   20

	check_main

	[ "$_dc_setverbose" = '0' ] && {
		while :; do
		_dc_mainrandom="$(LC_ALL=C head /dev/urandom | tr -dc "[:graph:]" | head -c "$_dc_setlimit"; echo)"

		if [ "$(hash "$_dc_maintype" "$_dc_mainrandom")" = "$_dc_mainhash" ]; then
			printf '%s\n' "[+] hash("$_dc_mainrandom") = ${_dc_mainhash}"
			[ "$_dc_setsave" = '0' ] && \
			printf '%s\n' "$(date "+%D %H:%M"): hash("$_dc_mainrandom") = ${_dc_mainhash}" >> $_dc_savefile
			exit ${_dc_true}
		else
			printf '%s\n' "[-] hash("$_dc_mainrandom") != ${_dc_mainhash}"
			printf '\e[1A'
		fi
		done
	}

	[ "$_dc_setverbose" = '1' ] && {
		while :; do
		_dc_mainrandom="$(LC_ALL=C head /dev/urandom | tr -dc "[:graph:]" | head -c "$_dc_setlimit"; echo)"

		[ "$(hash "$_dc_maintype" "$_dc_mainrandom")" = "$_dc_mainhash" ] && {
		        printf '%s\n' "[+] hash("$_dc_mainrandom") = ${_dc_mainhash}"
			[ "$_dc_setsave" = '0' ] && \
			printf '%s\n' "$(date "+%D %H:%M"): hash("$_dc_mainrandom") = ${_dc_mainhash}" >> $_dc_savefile
		        exit ${_dc_true}
		}
		done
	}
}

check_main()
{
	local __confirm__

	printf '\e[2J\e[H'
	msg "cleaning the screen..."
	msg ""

	show_title

	msg "command          : ${_dc_savecommand}"
	msg ""

	if [ "${_dc_setsave}" = '0' ]; then
		msg "save option      : true (${_dc_savefile})"
	else
		msg "save option      : false"
	fi

	if [ "${_dc_setverbose}" = '0' ]; then
		msg "verbose mode     : on"
	else
		msg "verbose mode     : off"
	fi

	msg "random text limit: ${_dc_setlimit}"

	msg "hash type        : ${_dc_maintype#--}"

	msg "target           : ${_dc_mainhash}"
	msg ""

	read -p "continue? (y/N): " __confirm__
	case ${__confirm__} in
		[yY]*) return ${_dc_true} ;;
		[nN]*) exit   ${_dc_true} ;;
		*) printf "invalid option."; exit ${_dc_false} ;;
	esac

	msg ""

	return ${_dc_true}
}

# ----------------------------------------------------------------------+
############################ BEGIN SCRIPT ############################

if [ "$#" = '0' ]; then
	shortLicense
else
	case ${1} in
	--help) showHelp ;;

	--license|-L) license ;;

	--version|-V) showVersion ;;

	--md5|--sha1|--sha224|--sha256|--sha384|--sha512|--b2)

		check_arguments $2 $3 # checking $2 $3

		: ${2:?hash is unset or null}

		main ${1} ${2} ${3}

	;;

	--save|-s|--no-verbose|-nv|-nvs|-svn)

		check_options $1 # checking $1
		check_arguments $2 $3 $3 # checking $2 $3 $4

		: ${2:?hashtype is unset or null}
		: ${3:?hash is unset or null}

		main ${2} ${3} ${4}
	;;

	*) showError "$1" ;;
	esac # case $1
fi

############################# END SCRIPT #############################
# ----------------------------------------------------------------------+
